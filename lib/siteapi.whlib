<?wh
LOADLIB "wh::datetime.whlib";

LOADLIB "mod::tollium/lib/gettid.whlib";

LOADLIB "mod::publisher/lib/publisher.whlib";
LOADLIB "mod::system/lib/cache.whlib";
LOADLIB "mod::system/lib/configure.whlib";
LOADLIB "mod::system/lib/database.whlib";
LOADLIB "mod::system/lib/whfs.whlib";

OBJECT _siteapi;
OBJECT _sitemenuapi;

PUBLIC OBJECTTYPE SiteAPI
< // ---------------------------------------------------------------------------
  //
  // Variables
  //
  RECORD sitesettings;
  OBJECT webdesign;

  PUBLIC PROPERTY ishome(IsHomePage, -);

  // ---------------------------------------------------------------------------
  //
  // Constructor
  //
  MACRO NEW(OBJECT webdesign)
  {
    this->webdesign := webdesign;

    IF (GetDTAPStage() != "production")
      this->webdesign->assetcachebuster := ToString(GetUnixTimestamp(GetCurrentDateTime()));
  }

  // ---------------------------------------------------------------------------
  //
  // Public API
  //
  PUBLIC MACRO ApplySiteSettings()
  {
    this->sitesettings := this->webdesign->targetsite->rootobject->GetInstanceData("http://sites.webwerf.nl/sitesettings");
    this->webdesign->languagecode := this->sitesettings.sitelanguage ?? "nl";
    SetTIDLanguage(this->webdesign->languagecode);
  }

  PUBLIC STRING FUNCTION GetImageCSS(RECORD image, RECORD imagesettings, BOOLEAN objectfit DEFAULTSTO FALSE)
  {
    IF (NOT RecordExists(image))
      RETURN "";

    RECORD wrapped := WrapCachedImage(image, imagesettings);

    STRING pos := wrapped.refpoint_backgroundposition ?? 'center';

    IF (objectfit)
      RETURN `object-fit: cover; object-position: ${pos}`;

    RETURN `background-size: cover;
            background-image: url(${wrapped.link});
            background-position: ${pos};
            background-color: ${wrapped.dominantcolor}`;
  }

  // the instance data referenced by ns_pagesettingstype should contain a 'seotitle' cell
  PUBLIC RECORD ARRAY FUNCTION GetPath(STRING ns_pagesettingstype)
  {
    RECORD ARRAY path := __GenerateFilePath(this->webdesign->targetobject->id, "");

    // optionally use the SEO 'Overwrite title' setting for the title
    OBJECT pagesettingstype := OpenWHFSType(ns_pagesettingstype);
    FOREVERY (RECORD pathitem FROM path)
    {
      RECORD filesettings := pagesettingstype->GetInstanceData(pathitem.id);
      IF (RecordExists(filesettings) AND filesettings.seotitle != "")
        path[#pathitem].title := filesettings.seotitle;
    }

    RETURN SELECT *, link := url FROM path;
  }

  PUBLIC RECORD ARRAY FUNCTION GetLanguageSites()
  {
    OBJECT parentfolder := OpenWHFSObject(this->webdesign->targetsite->rootobject->parent);
    IF (NOT ObjectExists(parentfolder) OR parentfolder->typens != "http://sites.webwerf.nl/foldertype/languagesites")
      RETURN DEFAULT RECORD ARRAY;

    RECORD ARRAY languagesites :=
        SELECT id
             , title
             , link := indexurl
          FROM system.fs_objects
         WHERE parent = parentfolder->id;

    languagesites :=
        SELECT *
          FROM OpenWHFSType("http://sites.webwerf.nl/sitesettings")->Enrich(languagesites, "ID", ["addsite","sitelanguage"])
         WHERE addsite = TRUE;

    // check for unique languages
    RECORD ARRAY grouped :=
        SELECT sitelanguage
             , num := Length(GroupedValues(languagesites))
          FROM languagesites
      GROUP BY sitelanguage;

    RECORD notunique := SELECT * FROM grouped WHERE num > 1;
    IF (RecordExists(notunique))
      Abort('Found multiple sites in the same language:' || AnyToString(notunique,'tree'));

    languagesites :=
        SELECT *
             , selected := this->webdesign->targetsite->id = id
             , langcode := ToUpperCase(sitelanguage)
             , title := this->GetSiteLanguateTitle(sitelanguage)
          FROM languagesites;

    RETURN languagesites;
  }

  // please note that this function doesn't check on indexurl/publish
  // the function will throw an exception if it found multiple objects
  PUBLIC OBJECT FUNCTION GetRootObject(RECORD options)
  {
    options := ValidateOptions([ type := "" // type namespace
                               , expect := "" // "", file, folder
                               ]
                               , options
                               , [ required := ["type"]
                                 ]);

    OBJECT whfstype := OpenWHFSType(options.type);
    IF (NOT ObjectExists(whfstype))
      THROW NEW Exception(`Could not find WHFS type "${options.type}"`);

    RECORD ARRAY objects :=
        SELECT id
          FROM system.fs_objects
         WHERE parent = this->webdesign->targetsite->rootobject->id
               AND type = whfstype->id;

    IF (Length(objects) = 0)
      THROW NEW Exception(`Could not find any root object for type "${options.type}"`);

    IF (Length(objects) > 1)
      THROW NEW Exception(`Multiple root objects found for type "${options.type}"`);

    OBJECT fsobject := OpenWHFSObject(objects[0].id);
    IF (NOT ObjectExists(fsobject))
      THROW NEW Exception(`Could not find root object for type "${options.type}" (#${objects[0].id})`);

    IF (options.expect != "")
    {
      // if expecting a file, it shouldn't be a folder
      IF (options.expect = "file" AND fsobject->isfolder)
        THROW NEW Exception(`Expected file but got folder for type "${options.type}" (#${objects[0].id})`);

      // if expeciting a folder, it shouldn't be a file
      IF (options.expect = "folder" AND NOT fsobject->isfolder)
        THROW NEW Exception(`Expected file but got folder for type "${options.type}" (#${objects[0].id})`);
    }

    RETURN fsobject;
  }

  // get files from folder
  // orders by ordering, title, id
  PUBLIC RECORD ARRAY FUNCTION GetSubFiles(RECORD options)
  {
    options := ValidateOptions([ parent := 0 // parent folder id
                               , type := "" // type namespace
                               , limitnum := 0
                               , checktitle := TRUE
                               , checkindexurl := TRUE // checks for both "publish" as well as empty URLs
                               ]
                               , options
                               , [ required := ["parent"]
                                 ]);

    IF (options.parent = 0)
      THROW NEW Exception(`"parent" must be set`);

    // check for existing parent folder
    OBJECT parentfolder := OpenWHFSObject(options.parent);
    IF (NOT ObjectExists(parentfolder))
      THROW NEW Exception(`Could not find WHFS object #${options.parent}`);

    IF (NOT parentfolder->isfolder)
      THROW NEW Exception(`WHFS object #${options.parent} is a file, not a folder`);

    OBJECT whfstype := options.type != "" ? OpenWHFSType(options.type) : DEFAULT OBJECT;

    RETURN
         SELECT *
           FROM system.fs_objects
          WHERE parent = options.parent
                AND (ObjectExists(whfstype) ? type = whfstype->id : TRUE)
                AND (options.checktitle ? title != "" : TRUE)
                AND (options.checkindexurl ? indexurl != "" : TRUE)
       ORDER BY ordering, ToUpperCase(title), id
          LIMIT (options.limitnum > 0 ? options.limitnum : 99999);
  }

  // ---------------------------------------------------------------------------
  //
  // Private functions
  //
  BOOLEAN FUNCTION IsHomePage()
  {
    RETURN this->webdesign->targetobject->id = this->webdesign->targetsite->rootobject->indexdoc;
  }

  STRING FUNCTION GetSiteLanguateTitle(STRING lang)
  {
    SWITCH (ToUpperCase(lang))
    {
      CASE "NL" { RETURN GetTid("webwerf_sites:site.languages.nl"); }
      CASE "DE" { RETURN GetTid("webwerf_sites:site.languages.de"); }
      CASE "EN" { RETURN GetTid("webwerf_sites:site.languages.en"); }
    }

    RETURN "";
  }
>;

/**
  Site menu API

  Witty:

  [component menu]
    <ul class="menu__list">
      [forevery menuitems]
        <li class="menu__listitem [if menuitems]menu__listitem--has-sub-items[/if] [if selected]menu__listitem--selected[/if]">
          <a href="[link]" class="menu__link [if selected]menu__link--selected[/if]">
           [title]
          </a>
          [if menuitems]
            [embed menu]
          [/if]
        </li>
      [/forevery]
    </ul>
  [/component]

  Library (assuming main whlib's GetPageConfig()):

  OBJECT menuapi := GetSiteMenuAPI(this);
  // ... settings ...
  RETURN [ menuitems := menuapi->Generate() ];
*/
OBJECTTYPE SiteMenuAPI
<
  OBJECT webdesign;
  INTEGER ARRAY fulltree;
  INTEGER ARRAY skiptypeids;

  PUBLIC INTEGER max_depth; // maximum folder depth, default 3
  PUBLIC STRING ARRAY skiptypes; // string array of contenttype namespaces to skip (both folders and files)
  PUBLIC STRING ARRAY foldertypes_indexonly; // string array of folder types for which we only want to add the index file
  PUBLIC BOOLEAN skipindexdocuments; // whether to skip index files in sub menus, default TRUE
  PUBLIC BOOLEAN skiprootfiles; // whether to skip root files (files with the site root as parent), default TRUE
  PUBLIC BOOLEAN addhome; // if TRUE, adds 'Home' as the first item in the first level (uses the root index file!), default FALSE
  PUBLIC BOOLEAN addemptytitles; // if TRUE, adds files with empty titles (unless 'noindex' is enabled)
  PUBLIC BOOLEAN allowemptyindexurl;

  PUBLIC RECORD ARRAY flat_items_list; // holds a flat list of all menu items

  MACRO NEW(OBJECT webdesign)
  {
    this->webdesign := webdesign;
    this->max_depth := 3;
    this->skipindexdocuments := TRUE;
    this->skiprootfiles := TRUE;
  }

  PUBLIC RECORD ARRAY FUNCTION Generate()
  {
    IF (Length(this->skiptypes) > 0)
    {
      IF (Length(this->skiptypeids) = 0) // only retrieve WHFS types once
      {
        FOREVERY (STRING type FROM this->skiptypes)
        {
          OBJECT whfstype := OpenWHFSType(type);
          IF (ObjectExists(whfstype))
            INSERT whfstype->id INTO this->skiptypeids AT END;
        }
      }
    }

    this->fulltree := this->webdesign->targetobject->GetFullTree();

    RETURN this->GetRecursiveMenu(this->webdesign->targetsite->root, 0);
  }

  BOOLEAN FUNCTION IsIndexFile(INTEGER fsid, BOOLEAN isfolder, INTEGER parentfolder_indexdoc)
  {
    RETURN NOT isfolder AND parentfolder_indexdoc = fsid;
  }

  RECORD ARRAY FUNCTION GetRecursiveMenu(INTEGER getparent, INTEGER depth)
  {
    IF (depth >= this->max_depth) //done
      RETURN DEFAULT RECORD ARRAY;

    OBJECT parentfolder := OpenWHFSObject(getparent);

    BOOLEAN indexonly := parentfolder->typens IN this->foldertypes_indexonly;

    RECORD ARRAY items :=
        SELECT id
             , name
             , title
             , isfolder
             , modificationdate
             , link := indexurl
             , depth := VAR depth
             , selected := id IN this->fulltree
             , menuitems := isfolder ? this->GetRecursiveMenu(id, depth + 1) : DEFAULT RECORD ARRAY
          FROM system.fs_objects AS fsobj
         WHERE parent = getparent
               AND (this->addemptytitles ? TRUE : title != "")
               AND (NOT this->skiprootfiles ? TRUE : depth = 0 ? isfolder : TRUE)
               AND (depth > 0 AND this->skipindexdocuments AND this->IsIndexFile(fsobj.id, fsobj.isfolder, parentfolder->indexdoc) ? FALSE : TRUE)
               AND type != 2 /* skip system folders */
               AND (this->allowemptyindexurl ? TRUE : indexurl != "")
               AND (Length(this->skiptypeids) > 0 ? type NOT IN this->skiptypeids : TRUE)
               AND (indexonly ? isfolder AND this->IsIndexFile(fsobj.id, fsobj.isfolder, parentfolder->indexdoc) : TRUE)
      ORDER BY ordering, ToUppercase(title), id;

    IF (this->addemptytitles)
    {
      OBJECT seotab := OpenWHFSType("http://www.webhare.net/xmlns/socialite/seotab");

      items :=
          SELECT *
            FROM seotab->Enrich(items, "ID", ["noindex"])
           WHERE NOT noindex;
    }

    IF (depth = 0 AND this->addhome)
    {
      OBJECT homepage := OpenWHFSObject(this->webdesign->targetsite->rootobject->indexdoc);
      IF (ObjectExists(homepage))
      {
        INSERT [ id := this->webdesign->targetsite->rootobject->indexdoc
               , name := homepage->name
               , title := homepage->title ?? "Home"
               , isfolder := FALSE
               , modificationdate := homepage->modificationdate
               , link := homepage->indexurl
               , depth := 0
               , selected := homepage->id IN this->fulltree
               , menuitems := DEFAULT RECORD ARRAY
               ] INTO items AT 0;
      }
    }

    items :=
        SELECT *
             , multiple_subitems := Length(menuitems) > 1
          FROM items;

    this->flat_items_list := this->flat_items_list CONCAT items;

    RETURN items;
  }
>;

PUBLIC OBJECT FUNCTION GetSiteAPI(OBJECT webdesign)
{
  IF (NOT ObjectExists(_siteapi))
    _siteapi := NEW SiteAPI(webdesign);

  RETURN _siteapi;
}

PUBLIC OBJECT FUNCTION GetSiteMenuAPI(OBJECT webdesign)
{
  IF (NOT ObjectExists(_sitemenuapi))
    _sitemenuapi := NEW SiteMenuAPI(webdesign);

  RETURN _sitemenuapi;
}

// copied from `mod::publisher/lib/tools/navpaths.whlib`, added id
RECORD ARRAY FUNCTION __GenerateFilePath(INTEGER tofile,STRING sitename)
{
  RECORD ARRAY returnlist;

  //Gather the file properties first
  RECORD filerec := SELECT (FILES.title="" ? FILES.name : FILES.title) AS title,
                            FILES.NAME AS name,
                            FILES.URL,
                            FILES.ID,
                            ORIGINALTITLE := FILES.TITLE,
                            FILES.PARENT AS __parent,
                            FOLDERS.INDEXDOC AS __indexdoc
                     FROM system.fs_objects as files, system.fs_objects as folders
                     WHERE FILES.ID=TOFILE
                           AND FOLDERS.ID = FILES.PARENT
                           AND files.isfolder = FALSE
                           AND folders.isfolder = TRUE
                     LIMIT 1;

  IF (NOT RECORDEXISTS(filerec))
    RETURN returnlist;

  //first create a path _to_ the file.
  returnlist := __GenerateFolderPath(filerec.__parent,sitename);

  //Should the file be on the list?
  IF (filerec.__indexdoc != tofile)
  { //yes, then add it!
    INSERT filerec INTO returnlist AT END;
  }

  //return the complete list, with our file added if necessary
  RETURN returnlist;
}

// copied from `mod::publisher/lib/tools/navpaths.whlib`, added id
RECORD ARRAY FUNCTION __GenerateFolderPath(INTEGER tofolder, STRING sitename)
{
  RECORD ARRAY returnlist;
  STRING indexpagename;

  INTEGER ARRAY foldertree := GetFolderTreeIDs(tofolder);
  FOREVERY (INTEGER folderid FROM foldertree)
  {
    RECORD folderlink := SELECT (sitename != "" AND folderid=foldertree[0])
                                   ? sitename //root must be overriden
                                   : (title="" ? name : title)//no override
                                   AS TITLE,
                                 NAME,
                                 ID,
                                 ORIGINALTITLE := TITLE,
                                INDEXURL AS URL
                         FROM system.fs_objects
                         WHERE id=folderid
                         LIMIT 1;

    INSERT folderlink INTO returnlist AT END;
  }
  RETURN returnlist;
}
