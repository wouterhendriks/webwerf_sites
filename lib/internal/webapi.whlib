<?wh

LOADLIB "wh::internet/urls.whlib";

LOADLIB "mod::system/lib/webapi/oauth2.whlib";


PUBLIC STATIC OBJECTTYPE WebwerfWebAPI
<
  PUBLIC OBJECT browser;

  /// sets the mode with optional settings, options for mode: oauth2
  PUBLIC PROPERTY mode(pvt_mode, SetMode);

  OBJECT oauth2;
  STRING restapiurl;
  STRING pvt_mode;

  PUBLIC RECORD FUNCTION Request(STRING method, STRING endpoint, RECORD options DEFAULTSTO DEFAULT RECORD)
  {
    IF (this->pvt_mode = "")
      Abort("Cannot make a request until SetMode is called");

    RECORD result := [ statustext := ""
                     , statuscode := 0
                     , success := FALSE
                     , errors := RECORD[]
                     // , response := DEFAULT VARIANT // RECORD or RECORD ARRAY
                     ];

    options := ValidateOptions([ data := DEFAULT RECORD
                               , urlvariables := DEFAULT RECORD
                               , jsontranslations := DEFAULT RECORD
                               , add_slash_in_front := TRUE
                               ], options);

    IF (options.add_slash_in_front AND Left(endpoint, 1) != "/")
      endpoint := "/" || endpoint;

    STRING url := UpdateURLVariables(this->restapiurl || endpoint, options.urlvariables);

    method := ToUpperCase(method);
    STRING ARRAY allowed_methods := ["GET","POST","PATCH","PUT","DELETE"];
    IF (method NOT IN allowed_methods)
      THROW NEW Exception("Invalid method. Options: " || AnyToString(allowed_methods,'tree'));

    BLOB body := RecordExists(options.data) ? EncodeJSONBlob(options.data) : DEFAULT BLOB;

    BOOLEAN requestsuccess := this->oauth2->browser->SendRawRequest(method, url, RECORD[], body);

    result.statustext := this->oauth2->browser->GetHTTPStatusText();
    result.statuscode := this->oauth2->browser->GetHTTPStatusCode();

    VARIANT requestresult := DecodeJSONBlob(this->oauth2->browser->content, options.jsontranslations);
    IF (TypeId(requestresult) = TypeID(VARIANT ARRAY))
      requestresult := RECORD[];

    result.errors := this->CheckForErrors(requestresult, result.statuscode);
    result.success := Length(result.errors) = 0;

    INSERT CELL response := requestresult INTO result;

    RETURN result;
  }

  PUBLIC RECORD ARRAY FUNCTION CheckForErrors(VARIANT response, INTEGER httpstatuscode)
  {
    Abort("You must UPDATE the CheckForErrors function. It should return a RECORD ARRAY of errors with at least a cell 'error' containing the error message (if any). Params in this function: VARIANT response, INTEGER httpstatuscode");
  }

  PUBLIC MACRO SetMode(STRING mode, RECORD options)
  {
    this->pvt_mode := mode;

    SWITCH (mode)
    {
      CASE "oauth2"
      {
        options := ValidateOptions([ clientregistrykey := ""
                                   , tokenregistrykey := ""
                                   , restapiurl := ""
                                   ], options
                                   , [ required := ["clientregistrykey","tokenregistrykey","restapiurl"] ]
                                   );

        this->oauth2 := NEW Oauth2Connection(CELL[ options.clientregistrykey ]);
        this->oauth2->SetupTokenUsingRegistryKey(options.tokenregistrykey);

        this->browser := this->oauth2->browser;
        this->restapiurl := options.restapiurl;
      }
      DEFAULT
      {
        THROW NEW Exception(`Unknown mode "${mode}"`);
      }
    }
  }

  MACRO ThrowLastRequest()
  {
    THROW NEW Exception(`${this->oauth2->browser->href}: ${this->oauth2->browser->GetHTTPStatusText()}`);
  }
>;
