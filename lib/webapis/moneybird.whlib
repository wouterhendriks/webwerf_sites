<?wh

LOADLIB "wh::money.whlib";

LOADLIB "mod::webwerf_sites/lib/internal/webapi.whlib";


CONSTANT RECORD __contactstructure := [ company_name := ""
                                      , chamber_of_commerce := ""
                                      , id := ""
                                      , customer_id := ""
                                      , email := ""
                                      , firstname := ""
                                      , lastname := ""
                                      ];

PUBLIC STATIC OBJECTTYPE WebwerfMoneyBirdAPI EXTEND WebwerfWebAPI
<
  PUBLIC STRING administrationid;

  /// enable/disable browser debug boolean
  PUBLIC PROPERTY debug(this->browser->debug, this->browser->debug);

  PUBLIC MACRO Setup(RECORD options)
  {
    this->SetMode("oauth2", CELL[ options.clientregistrykey
                                , options.tokenregistrykey
                                , restapiurl := "https://moneybird.com/api/v2/"
                                ]);

    this->administrationid := options.administrationid;
  }

  /** Lists all administrations the current user has access to.

      https://developer.moneybird.com/api/administration/

      @return All administrations the current user has access to
  */
  PUBLIC RECORD ARRAY FUNCTION GetAdministrations()
  {
    RECORD request := this->Request("GET", "/administrations", [ add_administrationid_to_call := FALSE ]);

    RETURN EnforceStructure([[ country := ""
                             , currency := ""
                             , id := ""
                             , language := ""
                             , name := ""
                             , time_zone := ""
                             ]], request.response);
  }

  /** Searching for contacts can be done by providing the query parameter with search terms.

      For more info and the query parameter: https://developer.moneybird.com/api/contacts/#get_contacts

      @return A list of contacts in the administration.
  */
  PUBLIC RECORD ARRAY FUNCTION GetContacts(RECORD options DEFAULTSTO DEFAULT RECORD)
  {
    // FIXME: add pagination (or at the very least an option to return from all pages)

    options := ValidateOptions([ query := "" ], options);

    RECORD requestoptions;
    IF (options.query != "")
      requestoptions := CellInsert(requestoptions, "urlvariables", [ query := options.query ]);

    RECORD request := this->Request("GET", "/contacts", requestoptions);
    IF (NOT request.success)
      RETURN RECORD[];

    request.response := EnforceStructure([__contactstructure], request.response);

    RETURN request.response;
  }

  PUBLIC RECORD FUNCTION GetContact(STRING id)
  {
    RECORD req := this->Request("GET", `/contacts/${id}`, DEFAULT RECORD);
    RETURN EnforceStructure(__contactstructure, req.response);
  }

  PUBLIC RECORD FUNCTION CreateSalesInvoice(RECORD data)
  {
    data := ValidateOptions([ contact_id := ""
                            , details_attributes := [[ description := ""
                                                     , price := 0.0
                                                     , amount := ""
                                                     ]
                                                    ]
                            ], data
                            , [ required := ["contact_id"]
                              ]);

    data.details_attributes :=
        SELECT *
             , price := FormatMoney(price, 2, ".", "", TRUE)
          FROM data.details_attributes;

    RETURN this->Request("POST", "sales_invoices", [ data := [ sales_invoice := data ] ]);
  }

  // https://developer.moneybird.com/api/sales_invoices/#patch_sales_invoices_id_send_invoice
  PUBLIC RECORD FUNCTION SendSalesInvoice(RECORD data)
  {
    data := ValidateOptions([ invoice_id := ""
                            , delivery_method := "Email" // Can be Email, Simplerinvoicing, Post or Manual.
                            ], data
                            , [ required := ["invoice_id"]
                              ]);

    RETURN this->Request("PATCH", `/sales_invoices/${data.invoice_id}/send_invoice`, [ data := [ sales_invoice_sending := data ] ]);
  }

  /** Do a lowlevel call straight to the api

      @param method GET, POST, PUT, etc
      @param endpoint Endpoint URL, eg /sales_invoices
      @cell options.add_administrationid_to_call If TRUE, adds administration id to endpoint, defaults to TRUE - should only be FALSE for /administrations/
      @cell options.data Data record (body/attributes) to pass
      @cell options.urlvariables Variables to add to the query, eg 'query'

      @return Call result, either a RECORD or RECORD ARRAY, depending on endpoint
  */
  PUBLIC UPDATE RECORD FUNCTION Request(STRING method, STRING endpoint, RECORD options DEFAULTSTO DEFAULT RECORD)
  {
    options := ValidateOptions([ add_administrationid_to_call := TRUE
                               , data := DEFAULT RECORD
                               , urlvariables := DEFAULT RECORD
                               ], options);

    IF (options.add_administrationid_to_call AND this->administrationid = "")
      THROW NEW Exception("Administration id must be set in the object (->administrationid). Example: 164243204529456416");

    IF (options.add_administrationid_to_call)
    {
      IF (Left(endpoint, 1) = "/")
        endpoint := Substring(endpoint, 1);

      endpoint := `${this->administrationid}/${endpoint}`;
    }

    options := CellDelete(options, "add_administrationid_to_call");

    RETURN WebwerfWebAPI::Request(method, endpoint, options);
  }

  PUBLIC STRING FUNCTION GetLinkToInvoice(STRING invoiceid)
  {
    RETURN `https://moneybird.com/${this->administrationid}/sales_invoices/${invoiceid}`;
  }

  PUBLIC UPDATE RECORD ARRAY FUNCTION CheckForErrors(VARIANT response, INTEGER httpstatuscode)
  {
    RECORD ARRAY errors;
    IF (CellExists(response, "error"))
      INSERT [ error := response.error ] INTO errors AT END;
    ELSE IF (ToString(httpstatuscode) NOT LIKE "2??")
      INSERT [ error := `Invalid status code: ${httpstatuscode}` ] INTO errors AT END;

    RETURN errors;
  }
>;
