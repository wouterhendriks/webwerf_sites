<?wh

LOADLIB "wh::files.whlib";

LOADLIB "wh::internet/urls.whlib";
LOADLIB "wh::internet/webbrowser.whlib";

LOADLIB "mod::system/lib/mailer.whlib";
LOADLIB "mod::system/lib/webapi/oauth2.whlib";


PUBLIC STATIC OBJECTTYPE WebwerfWebAPI
<
  PUBLIC OBJECT browser;

  /// sets the mode with optional settings, options for mode: "oauth2", "rest"
  PUBLIC PROPERTY mode(pvt_mode, SetMode);

  /// if set, this email is used if a (relatively normal) error occurs
  PUBLIC PROPERTY errormail(pvt_errormail, SetErrorMail);

  /// if set, this email is used if an exception occurs
  PUBLIC PROPERTY panicmail(pvt_panicmail, SetPanicMail);

  OBJECT oauth2;
  STRING restapiurl;
  STRING pvt_mode;
  STRING pvt_errormail;
  STRING pvt_panicmail;

  PUBLIC RECORD FUNCTION Request(STRING method, STRING endpoint, RECORD options DEFAULTSTO DEFAULT RECORD)
  {
    IF (this->pvt_mode = "")
      Abort("Cannot make a request until SetMode is called");

    RECORD result := this->GetDefaultRequestResult();

    options := ValidateOptions([ data := DEFAULT RECORD
                               , urlvariables := DEFAULT RECORD
                               , jsontranslations := DEFAULT RECORD
                               , add_slash_in_front := TRUE
                               , headers := RECORD[]
                               ], options);

    IF (options.add_slash_in_front AND Left(endpoint, 1) != "/")
      endpoint := "/" || endpoint;

    STRING url := UpdateURLVariables(this->restapiurl || endpoint, options.urlvariables);

    method := ToUpperCase(method);
    STRING ARRAY allowed_methods := ["GET","POST","PATCH","PUT","DELETE"];
    IF (method NOT IN allowed_methods)
      THROW NEW Exception("Invalid method. Options: " || AnyToString(allowed_methods,'tree'));

    BLOB body := RecordExists(options.data) ? EncodeJSONBlob(options.data, options.jsontranslations) : DEFAULT BLOB;

    BOOLEAN requestsuccess := this->browser->SendRawRequest(method, url, options.headers, body);

    result.statustext := this->browser->GetHTTPStatusText();
    result.statuscode := this->browser->GetHTTPStatusCode();

    VARIANT requestresult := DecodeJSONBlob(this->browser->content);
    IF (TypeId(requestresult) = TypeID(VARIANT ARRAY))
      requestresult := RECORD[];

    result.errors := this->CheckForErrors(requestresult, result.statuscode);
    result.success := Length(result.errors) = 0;

    result := [ ...result, response := requestresult ];

    IF (Length(result.errors) > 0 AND this->pvt_errormail != "")
      this->SendErrorMail(this->pvt_errormail, result, FALSE);

    RETURN result;
  }

  PUBLIC RECORD ARRAY FUNCTION CheckForErrors(VARIANT response, INTEGER httpstatuscode)
  {
    Abort("You must UPDATE the CheckForErrors function. It should return a RECORD ARRAY of errors with at least a cell 'error' containing the error message (if any). Params in this function: VARIANT response, INTEGER httpstatuscode");
  }

  PUBLIC MACRO SetMode(STRING mode, RECORD options)
  {
    this->pvt_mode := mode;

    SWITCH (mode)
    {
      CASE "oauth2"
      {
        options := ValidateOptions([ clientregistrykey := ""
                                   , tokenregistrykey := ""
                                   , restapiurl := ""
                                   ], options
                                   , [ required := ["clientregistrykey","tokenregistrykey","restapiurl"] ]
                                   );

        this->oauth2 := NEW Oauth2Connection(CELL[ options.clientregistrykey ]);
        this->oauth2->SetupTokenUsingRegistryKey(options.tokenregistrykey);

        this->browser := this->oauth2->browser;
        this->restapiurl := options.restapiurl;
      }
      CASE "rest"
      {
        options := ValidateOptions([ restapiurl := ""
                                   ], options
                                   , [ required := ["restapiurl"] ]
                                   );

        this->browser := NEW WebBrowser;
        this->restapiurl := options.restapiurl;
      }
      DEFAULT
      {
        THROW NEW Exception(`Unknown mode "${mode}"`);
      }
    }

    //IF(IsRPCTrafficLogged("system:webapi.mailchimp"))
    //  LogRPCForWebBrowser("system:webapi.mailchimp", "", this->browser);
  }

  PUBLIC RECORD FUNCTION GetDefaultRequestResult()
  {
    RETURN [ statustext := ""
           , statuscode := 0
           , success := FALSE
           , errors := RECORD[]
           , response := DEFAULT RECORD
           ];
  }

  PUBLIC MACRO ThrowLastRequest(STRING extramessage)
  {
    STRING err := `${extramessage = "" ? "" : `${extramessage}\n\n`}${this->browser->href}: ${this->browser->GetHTTPStatusText()}`;

    IF (this->pvt_panicmail != "")
      this->SendErrorMail(this->pvt_panicmail, err, TRUE);

    THROW NEW Exception(err);
  }

  MACRO SendErrorMail(STRING email, VARIANT message, BOOLEAN panic)
  {
    STRING msg := `${AnyToString(message,'htmltree')}<hr><br>${AnyToString(GetStackTrace(),'htmltree')}`;
    OBJECT mail := MakeEmailComposer();
    mail->mailto := [ email ];
    mail->subject := `${panic ? '[panic] ' : ''}WebAPI error for ${this->restapiurl} (${this->pvt_mode})`;
    mail->SetRichBody(StringToBlob(msg), "text/html");
    mail->QueueMail();
  }

  MACRO SetErrorMail(STRING email)
  {
    IF (NOT IsValidEmailAddress(email))
      THROW NEW Exception(`Invalid email "${email}"`);

    this->pvt_errormail := email;
  }

  MACRO SetPanicMail(STRING email)
  {
    IF (NOT IsValidEmailAddress(email))
      THROW NEW Exception(`Invalid email "${email}"`);

    this->pvt_panicmail := email;
  }
>;
